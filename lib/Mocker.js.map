{"version":3,"sources":["../src/Mocker.js"],"names":[],"mappings":"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","file":"Mocker.js","sourcesContent":["import {compose, range} from 'freshman'\nimport Config from './Config'\n\nimport Database from './Database'\n\n// generateDescriptor :: ConfigType -> Model\nconst generateDescriptor = (db, gen) => new gen.model(db)\n\n// processLeaf :: LeafNode -> Object\nconst processLeaf = function(l) {return l.run(this)}\n\n// processDescriptor :: Model -> ProcessedObject\nconst processDescriptor = (d) => {\n  return Object.keys(d).reduce((acc, k) => {\n    let obj = d[k]\n\n    // Process a complex object recursively\n    function recursiveCall(obj) {\n      if (obj && obj.run) {\n        return processLeaf.call(acc, obj)\n      } else if(typeof obj == \"object\") {\n        return Object.keys(obj).reduce((acc, k) => {\n          acc[k] = recursiveCall(obj[k])\n          return acc;\n        }, {});\n      }\n    }\n\n    acc[k] = recursiveCall(obj)\n    return acc\n  }, {})\n}\n\n// cleanVirtuals :: Model -> Object -> Object\nconst cleanVirtuals = (descriptor, instance) => {\n  let virtuals = descriptor.constructor.virtuals\n  if (virtuals) virtuals.forEach(k => delete instance[k])\n}\n\nexport default class Mocker {\n\n  constructor(db: Database) {\n    this.db = db\n  }\n\n  schemas = [];\n\n  reset() {\n    this.schemas = []\n  }\n\n  schema(Model, count) {\n    this.schemas.push(new Config(Model, count))\n    return this\n  }\n\n  getDescriptors() {\n    return this.schemas.reduce((acc, schema) => {\n      let desc = generateDescriptor(acc, schema)\n      acc.newCollection(schema.type, desc)\n      return acc\n    }, this.db)\n  }\n\n  build() {\n    this.schemas.reduce((acc, schema) => {\n\n      // Generate a descriptor for schema\n      let desc = generateDescriptor(acc, schema)\n\n      // Generate instances from descriptor\n      let instances = range(0, schema.count)\n        .map(() => processDescriptor(desc))\n\n      // Clean\n      instances.forEach(x => cleanVirtuals(desc, x))\n\n      // Add collection instances to db\n      acc.newCollection(schema.type, instances)\n\n      return acc\n    }, this.db)\n    return this\n  }\n}\n"]}