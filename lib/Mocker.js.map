{"version":3,"sources":["../src/Mocker.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAM,qBAAqB,SAArB,kBAAqB,CAAC,EAAD,EAAK,GAAL;SAAa,IAAI,IAAI,KAAJ,CAAU,EAAd;CAAb;;;AAG3B,IAAM,cAAc,SAAd,WAAc,CAAS,CAAT,EAAY;AAAC,SAAO,EAAE,GAAF,CAAM,IAAN,CAAP,CAAD;CAAZ;;;AAGpB,IAAM,oBAAoB,SAApB,iBAAoB,CAAC,CAAD,EAAO;AAC/B,SAAO,OAAO,IAAP,CAAY,CAAZ,EAAe,MAAf,CAAsB,UAAC,GAAD,EAAM,CAAN,EAAY;AACvC,QAAI,MAAM,EAAE,CAAF,CAAN;;;AADmC,aAI9B,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,UAAI,OAAO,IAAI,GAAJ,EAAS;AAClB,eAAO,YAAY,IAAZ,CAAiB,GAAjB,EAAsB,GAAtB,CAAP,CADkB;OAApB,MAEO,IAAG,QAAO,iDAAP,IAAc,QAAd,EAAwB;AAChC,eAAO,OAAO,IAAP,CAAY,GAAZ,EAAiB,MAAjB,CAAwB,UAAC,GAAD,EAAM,CAAN,EAAY;AACzC,cAAI,CAAJ,IAAS,cAAc,IAAI,CAAJ,CAAd,CAAT,CADyC;AAEzC,iBAAO,GAAP,CAFyC;SAAZ,EAG5B,EAHI,CAAP,CADgC;OAA3B;KAHT;;AAWA,QAAI,CAAJ,IAAS,cAAc,GAAd,CAAT,CAfuC;AAgBvC,WAAO,GAAP,CAhBuC;GAAZ,EAiB1B,EAjBI,CAAP,CAD+B;CAAP;;;AAsB1B,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,UAAD,EAAa,QAAb,EAA0B;AAC9C,MAAI,WAAW,WAAW,WAAX,CAAuB,QAAvB,CAD+B;AAE9C,MAAI,QAAJ,EAAc,SAAS,OAAT,CAAiB;WAAK,OAAO,SAAS,CAAT,CAAP;GAAL,CAAjB,CAAd;CAFoB;;IAKD;AAEnB,WAFmB,MAEnB,CAAY,EAAZ,EAA0B;0BAFP,QAEO;;SAI1B,UAAU,GAJgB;;AACxB,SAAK,EAAL,GAAU,EAAV,CADwB;GAA1B;;eAFmB;;4BAQX;AACN,WAAK,OAAL,GAAe,EAAf,CADM;;;;2BAID,OAAO,OAAO;AACnB,WAAK,OAAL,CAAa,IAAb,CAAkB,qBAAW,KAAX,EAAkB,KAAlB,CAAlB,EADmB;AAEnB,aAAO,IAAP,CAFmB;;;;qCAKJ;AACf,aAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC1C,YAAI,OAAO,mBAAmB,GAAnB,EAAwB,MAAxB,CAAP,CADsC;AAE1C,YAAI,aAAJ,CAAkB,OAAO,KAAP,EAAc,IAAhC,EAF0C;AAG1C,eAAO,GAAP,CAH0C;OAAjB,EAIxB,KAAK,EAAL,CAJH,CADe;;;;4BAQT;AACN,WAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,GAAD,EAAM,MAAN,EAAiB;;;AAGnC,YAAI,OAAO,mBAAmB,GAAnB,EAAwB,MAAxB,CAAP;;;AAH+B,YAM/B,YAAY,qBAAM,CAAN,EAAS,OAAO,KAAP,CAAT,CACb,GADa,CACT;iBAAM,kBAAkB,IAAlB;SAAN,CADH;;;AAN+B,iBAUnC,CAAU,OAAV,CAAkB;iBAAK,cAAc,IAAd,EAAoB,CAApB;SAAL,CAAlB;;;AAVmC,WAanC,CAAI,aAAJ,CAAkB,OAAO,KAAP,EAAc,SAAhC,EAbmC;;AAenC,eAAO,GAAP,CAfmC;OAAjB,EAgBjB,KAAK,EAAL,CAhBH,CADM;AAkBN,aAAO,IAAP,CAlBM;;;;SAzBW","file":"Mocker.js","sourcesContent":["import {compose, range} from 'freshman'\nimport Config from './Config'\n\nimport Database from './Database'\n\n// generateDescriptor :: ConfigType -> Model\nconst generateDescriptor = (db, gen) => new gen.model(db)\n\n// processLeaf :: LeafNode -> Object\nconst processLeaf = function(l) {return l.run(this)}\n\n// processDescriptor :: Model -> ProcessedObject\nconst processDescriptor = (d) => {\n  return Object.keys(d).reduce((acc, k) => {\n    let obj = d[k]\n\n    // Process a complex object recursively\n    function recursiveCall(obj) {\n      if (obj && obj.run) {\n        return processLeaf.call(acc, obj)\n      } else if(typeof obj == \"object\") {\n        return Object.keys(obj).reduce((acc, k) => {\n          acc[k] = recursiveCall(obj[k])\n          return acc;\n        }, {});\n      }\n    }\n\n    acc[k] = recursiveCall(obj)\n    return acc\n  }, {})\n}\n\n// cleanVirtuals :: Model -> Object -> Object\nconst cleanVirtuals = (descriptor, instance) => {\n  let virtuals = descriptor.constructor.virtuals\n  if (virtuals) virtuals.forEach(k => delete instance[k])\n}\n\nexport default class Mocker {\n\n  constructor(db: Database) {\n    this.db = db\n  }\n\n  schemas = [];\n\n  reset() {\n    this.schemas = []\n  }\n\n  schema(Model, count) {\n    this.schemas.push(new Config(Model, count))\n    return this\n  }\n\n  getDescriptors() {\n    return this.schemas.reduce((acc, schema) => {\n      let desc = generateDescriptor(acc, schema)\n      acc.newCollection(schema.model, desc)\n      return acc\n    }, this.db)\n  }\n\n  build() {\n    this.schemas.reduce((acc, schema) => {\n\n      // Generate a descriptor for schema\n      let desc = generateDescriptor(acc, schema)\n\n      // Generate instances from descriptor\n      let instances = range(0, schema.count)\n        .map(() => processDescriptor(desc))\n\n      // Clean\n      instances.forEach(x => cleanVirtuals(desc, x))\n\n      // Add collection instances to db\n      acc.newCollection(schema.model, instances)\n\n      return acc\n    }, this.db)\n    return this\n  }\n}\n"]}