{"version":3,"sources":["../../src/types/Faker.js"],"names":[],"mappings":";;;;;;;;;kBAwBwB;;;;;;;;;;;;;;;;;;;;;;;IAlBX;;;AAEX,WAFW,KAEX,CAAY,SAAZ,EAAuB;0BAFZ,OAEY;;uEAFZ,mBAEY;;AAErB,QAAI,OAAO,SAAP,IAAoB,QAApB,EAA8B;AAChC,YAAM,MAAM,yCAAN,CAAN,CADgC;KAAlC;;AAIA,UAAK,KAAL,GAAa,SAAb,CANqB;;GAAvB;;eAFW;;0BAWL;AACJ,UAAI,QAAQ,KAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAR,CADA;AAEJ,UAAI,OAAO,MAAM,MAAN,CAAa,UAAC,GAAD,EAAM,CAAN;eAAY,oBAAK,CAAL,EAAQ,GAAR;OAAZ,iBAAb,CAAP,CAFA;AAGJ,aAAO,MAAP,CAHI;;;;SAXK;;;AAkBE,SAAS,KAAT,CAAe,CAAf,EAAkB;AAC/B,SAAO,IAAI,KAAJ,CAAU,CAAV,CAAP,CAD+B;CAAlB","file":"Faker.js","sourcesContent":["import fakerjs from 'faker'\nimport Plugin from './Plugin'\n\n// prop :: String -> Object -> Any\nimport {prop} from 'freshman'\n\nexport class Faker extends Plugin {\n\n  constructor(generator) {\n    super()\n    if (typeof generator != \"string\") {\n      throw Error(\"Type of Faker generator is not a string\")\n    }\n\n    this.value = generator\n  }\n\n  run() {\n    let paths = this.value.split('.')\n    let fake = paths.reduce((acc, p) => prop(p, acc), fakerjs)\n    return fake()\n  }\n}\n\nexport default function faker(a) {\n  return new Faker(a);\n}\n"]}