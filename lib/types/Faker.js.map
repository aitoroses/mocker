{"version":3,"sources":["../../src/types/Faker.js"],"names":[],"mappings":";;;;;;;;kBAwBwB,KAAK;;;;;;;;;;;;;;;;;;;;;;IAlBhB,KAAK,WAAL,KAAK;YAAL,KAAK;;AAEhB,WAFW,KAAK,CAEJ,SAAS,EAAE;0BAFZ,KAAK;;uEAAL,KAAK;;AAId,QAAI,OAAO,SAAS,IAAI,QAAQ,EAAE;AAChC,YAAM,KAAK,CAAC,yCAAyC,CAAC,CAAA;KACvD;;AAED,UAAK,KAAK,GAAG,SAAS,CAAA;;GACvB;;eATU,KAAK;;0BAWV;AACJ,UAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACjC,UAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,CAAC;eAAK,cAfhC,IAAI,EAeiC,CAAC,EAAE,GAAG,CAAC;OAAA,kBAAU,CAAA;AAC1D,aAAO,IAAI,EAAE,CAAA;KACd;;;SAfU,KAAK;;;AAkBH,SAAS,KAAK,CAAC,CAAC,EAAE;AAC/B,SAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;CACrB","file":"Faker.js","sourcesContent":["import fakerjs from 'faker'\nimport Plugin from './Plugin'\n\n// prop :: String -> Object -> Any\nimport {prop} from 'freshman'\n\nexport class Faker extends Plugin {\n\n  constructor(generator) {\n    super()\n    if (typeof generator != \"string\") {\n      throw Error(\"Type of Faker generator is not a string\")\n    }\n\n    this.value = generator\n  }\n\n  run() {\n    let paths = this.value.split('.')\n    let fake = paths.reduce((acc, p) => prop(p, acc), fakerjs)\n    return fake()\n  }\n}\n\nexport default function faker(a) {\n  return new Faker(a);\n}\n"]}